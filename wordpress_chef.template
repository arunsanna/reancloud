{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "My shit to create wordpress site using cloudformation which i hate",
  "Parameters" : {
   "KeyName": {
         "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
         "Type": "AWS::EC2::KeyPair::KeyName",
         "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
       },
   "InstanceType" : {
          "Description" : "WebServer EC2 instance type",
          "Type" : "String",
          "Default" : "m1.small",
          "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium"],
          "ConstraintDescription" : "must be a valid EC2 instance type."
        },
   "SSHLocation": {
         "Description": "This is your damm ip address",
         "Type": "String",
         "MinLength": "9",
         "MaxLength": "18",
         "Default": "0.0.0.0/0",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
       },
   "DBName" : {
         "Default": "wordpress",
         "Description" : "The WordPress database name",
         "Type": "String",
         "MinLength": "1",
         "MaxLength": "64",
         "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
         "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
       },
   "DBUser" : {
         "NoEcho": "true",
         "Description" : "The WordPress database admin account username",
         "Type": "String",
         "MinLength": "1",
         "MaxLength": "16",
         "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
         "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
       },
   "DBPassword" : {
         "NoEcho": "true",
         "Description" : "The WordPress database admin account password",
         "Type": "String",
         "MinLength": "8",
         "MaxLength": "41",
         "AllowedPattern" : "[a-zA-Z0-9]*",
         "ConstraintDescription" : "must contain only alphanumeric characters."
       },
   "DBRootPassword" : {
         "NoEcho": "true",
         "Description" : "MySQL root password",
         "Type": "String",
         "MinLength": "8",
         "MaxLength": "41",
         "AllowedPattern" : "[a-zA-Z0-9]*",
         "ConstraintDescription" : "must contain only alphanumeric characters."
       }
     },
   "Mappings" : {
        "AWSInstanceType2Arch" : {
          "t1.micro"    : { "Arch" : "PV64"   },
          "t2.micro"    : { "Arch" : "HVM64"  },
          "t2.small"    : { "Arch" : "HVM64"  },
          "t2.medium"   : { "Arch" : "HVM64"  }
        },
        "AWSInstanceType2NATArch" : {
         "t1.micro"    : { "Arch" : "NATPV64"   },
         "t2.micro"    : { "Arch" : "NATHVM64"  },
         "t2.small"    : { "Arch" : "NATHVM64"  },
         "t2.medium"   : { "Arch" : "NATHVM64"  }
        },
        "AWSRegionArch2AMI" : {
         "us-east-1"        : {"PV64" : "ami-5fb8c835", "HVM64" : "ami-60b6c60a", "HVMG2" : "ami-e998ea83"}
        }

  },

  "Resources" : {
    "VPC" : {
          "Type" : "AWS::EC2::VPC",
          "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
          }
        },
    "Subnet" : {
          "Type" : "AWS::EC2::Subnet",
          "DependsOn" : "VPC",
          "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "CidrBlock" : "10.0.0.0/24",
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
          }
        },
    "IGW" : {
             "Type" : "AWS::EC2::InternetGateway",
             "Properties" : {
                "Tags" : [ {"Name" : "Owner", "Value" : "arun.sanna"}]
             }
          }
    "RouteTable" : {
             "Type" : "AWS::EC2::RouteTable",
             "DependsOn" : "IGW",
             "Properties" : {
                   "VpcId" : { "Ref": "VPC" }
                }
         }
    "Route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "IGW",
              "Properties" : {
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref": "IGW" },
                "RouteTableId" : { "Ref": "RouteTable" }
    }
    "RouteTableAssoc" : {
             "Type" : "AWS::EC2::SubnetRouteTableAssociation",
             "DependsOn" : "Subnet",
             "Properties" : {
               "RouteTableId" : { "Ref": "RouteTable" }
               "SubnetId" : { "Ref": "Subnet" }
             }
     }
    "WebServerSecurityGroup" : {
          "Type" : "AWS::EC2::SecurityGroup",
          "Properties" : {
            "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
            "SecurityGroupIngress" : [
              {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.0.0.0/16"},
              {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
            ]
          }
        },
    "WebServer": {
          "Type" : "AWS::EC2::Instance",
          "Properties": {
                  "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                  "InstanceType"   : { "Ref" : "InstanceType" },
                  "SecurityGroups" : [ { "Fn::GetAtt" : [ "WebServerSecurityGroup", "GroupId" ] } ],
                  "KeyName"        : { "Ref" : "KeyName" },
                  "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                                 "#!/bin/bash -xe\n",
                                 "yum update -y aws-cfn-bootstrap\n",

                                 "/opt/aws/bin/cfn-init -v ",
                                 "         --stack ", { "Ref" : "AWS::StackName" },
                                 "         --resource WebServer ",
                                 "         --configsets wordpress_install ",
                                 "         --region ", { "Ref" : "AWS::Region" }, "\n",

                                 "/opt/aws/bin/cfn-signal -e $? ",
                                 "         --stack ", { "Ref" : "AWS::StackName" },
                                 "         --resource WebServer ",
                                 "         --region ", { "Ref" : "AWS::Region" }, "\n"
                  ]]}}
                  "Tags" : [ {"Key" : "Owner", "Value" : "arun.sanna"},{"Key" : "Environment", "Value" : "Application-test" },{"Key" : "ExpirationDate", "Value" :  } ]
                },
                "SubnetId" : { "Ref": "Subnet" }
                
                "CreationPolicy" : {
                  "ResourceSignal" : {
                    "Timeout" : "PT15M"
                  }
                }
          }
     "Outputs" : {
        "WebsiteURL" : {
          "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServer", "PublicDnsName" ]}, "/wordpress" ]]},
          "Description" : "WordPress Website"
        }
  }
}